/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

angular
    .module("LayoutEditor")
    .directive("orcLayoutSmartgrid", [
        "scopeConfigurator",
        "environment",
        function (scopeConfigurator, environment) {
            return {
                restrict: "E",
                scope: { element: "=" },
                controller: [
                    "$scope",
                    "$element",
                    "$attrs",
                    function ($scope, $element, $attrs) {
                        scopeConfigurator.configureForElement($scope, $element);
                        scopeConfigurator.configureForContainer($scope, $element);
                        $scope.sortableOptions["axis"] = "y";
                    }
                ],
                templateUrl: environment.templateUrl("SmartGrid"),
                replace: true
            };
        }
    ]);
var LayoutEditor;

(function (LayoutEditor) {
    // The constructor.
    LayoutEditor.SmartGrid = function (data, contentType, htmlId, htmlClass, htmlStyle, isTemplated, rule, hasEditor, children) {

        var self = this;

        // Inherit from the Element base class.
        LayoutEditor.Element.call(self, "SmartGrid", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);
        
        // Inherit from the Container base class.
        //LayoutEditor.Container.call(self, ["Canvas", "Grid", "Content"],  children);
        LayoutEditor.Container.call(this, ["Row"], children);

        // This SmartGrid element is containable, which means it can be added
        // to any container, including SmartGrids.
        self.isContainable = true;

        // Used by the layout editor to determine if it should launch
        // the element editor dialog when creating new SmartGride elements.
        // Also used by our "LayoutEditor.Template.SmartGrid.cshtml" view
        // that is used as the layout‐smart-grid directive's template.
        self.hasEditor = hasEditor;

        // The element type name, which is sent back to the
        // element editor controller when being edited.
        self.contentType = contentType;
        
        // The "layout‐common‐holder" CSS class is used by the layout editor
        // to identify drop targets.
        self.dropTargetClass = "layout‐common‐holder";
        // Implements the toObject serialization function.
        // This is called when the layout is being serialized into JSON.
        var toObject = self.toObject;
        
        // Get a reference to the base function.
        self.toObject = function () {
            var result = toObject();
            // Invoke the base implementation.
            result.children = self.childrenToObject();
            return result;
        };
    };
    
    // Registers the factory function with the element factory.
    LayoutEditor.registerFactory("SmartGrid", function (value) {
        var smartGrid = new LayoutEditor.SmartGrid(
            value.data,
            value.contentType,
            value.htmlId,
            value.htmlClass,
            value.htmlStyle,
            value.isTemplated,
            value.rule,
            value.hasEditor,
            LayoutEditor.childrenFrom(value.children));
        
        // Initializes the toolbox specific properties.
        smartGrid.toolboxIcon = value.toolboxIcon;
        smartGrid.toolboxLabel = value.toolboxLabel;
        smartGrid.toolboxDescription = value.toolboxDescription;

        return smartGrid;
    });
})(LayoutEditor || (LayoutEditor = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNtYXJ0R3JpZEVsZW1lbnQuanMiLCJEaXJlY3RpdmUuanMiLCJNb2RlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IlNtYXJ0R3JpZEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImFuZ3VsYXJcclxuICAgIC5tb2R1bGUoXCJMYXlvdXRFZGl0b3JcIilcclxuICAgIC5kaXJlY3RpdmUoXCJvcmNMYXlvdXRTbWFydGdyaWRcIiwgW1xyXG4gICAgICAgIFwic2NvcGVDb25maWd1cmF0b3JcIixcclxuICAgICAgICBcImVudmlyb25tZW50XCIsXHJcbiAgICAgICAgZnVuY3Rpb27CoChzY29wZUNvbmZpZ3VyYXRvcizCoGVudmlyb25tZW50KcKge1xyXG4gICAgICAgICAgICByZXR1cm7CoHtcclxuICAgICAgICAgICAgICAgIHJlc3RyaWN0OsKgXCJFXCIsXHJcbiAgICAgICAgICAgICAgICBzY29wZTrCoHvCoGVsZW1lbnQ6wqBcIj1cIsKgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6wqBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCIkc2NvcGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIiRlbGVtZW50XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIkYXR0cnNcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbsKgKCRzY29wZSzCoCRlbGVtZW50LMKgJGF0dHJzKcKge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUNvbmZpZ3VyYXRvci5jb25maWd1cmVGb3JFbGVtZW50KCRzY29wZSzCoCRlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVDb25maWd1cmF0b3IuY29uZmlndXJlRm9yQ29udGFpbmVyKCRzY29wZSzCoCRlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRhYmxlT3B0aW9uc1tcImF4aXNcIl3CoD3CoFwieVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDrCoGVudmlyb25tZW50LnRlbXBsYXRlVXJsKFwiU21hcnRHcmlkXCIpLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZTrCoHRydWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICBdKTsiLCJ2YXIgTGF5b3V0RWRpdG9yO1xyXG5cclxuKGZ1bmN0aW9uwqAoTGF5b3V0RWRpdG9yKcKge1xyXG4gICAgLy/CoFRoZcKgY29uc3RydWN0b3IuXHJcbiAgICBMYXlvdXRFZGl0b3IuU21hcnRHcmlkwqA9wqBmdW5jdGlvbsKgKGRhdGEswqBjb250ZW50VHlwZSzCoGh0bWxJZCzCoGh0bWxDbGFzcyzCoGh0bWxTdHlsZSzCoGlzVGVtcGxhdGVkLMKgcnVsZSzCoGhhc0VkaXRvcizCoGNoaWxkcmVuKcKge1xyXG5cclxuICAgICAgICB2YXLCoHNlbGbCoD3CoHRoaXM7XHJcblxyXG4gICAgICAgIC8vwqBJbmhlcml0wqBmcm9twqB0aGXCoEVsZW1lbnTCoGJhc2XCoGNsYXNzLlxyXG4gICAgICAgIExheW91dEVkaXRvci5FbGVtZW50LmNhbGwoc2VsZiwgXCJTbWFydEdyaWRcIiwgZGF0YSwgaHRtbElkLCBodG1sQ2xhc3MsIGh0bWxTdHlsZSwgaXNUZW1wbGF0ZWQsIHJ1bGUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vwqBJbmhlcml0wqBmcm9twqB0aGXCoENvbnRhaW5lcsKgYmFzZcKgY2xhc3MuXHJcbiAgICAgICAgLy9MYXlvdXRFZGl0b3IuQ29udGFpbmVyLmNhbGwoc2VsZizCoFtcIkNhbnZhc1wiLMKgXCJHcmlkXCIswqBcIkNvbnRlbnRcIl0swqAgY2hpbGRyZW4pO1xyXG4gICAgICAgIExheW91dEVkaXRvci5Db250YWluZXIuY2FsbCh0aGlzLCBbXCJSb3dcIl0sIGNoaWxkcmVuKTtcclxuXHJcbiAgICAgICAgLy/CoFRoaXPCoFNtYXJ0R3JpZMKgZWxlbWVudMKgaXPCoGNvbnRhaW5hYmxlLMKgd2hpY2jCoG1lYW5zwqBpdMKgY2FuwqBiZcKgYWRkZWRcclxuICAgICAgICAvL8KgdG/CoGFuecKgY29udGFpbmVyLMKgaW5jbHVkaW5nwqBTbWFydEdyaWRzLlxyXG4gICAgICAgIHNlbGYuaXNDb250YWluYWJsZcKgPcKgdHJ1ZTtcclxuXHJcbiAgICAgICAgLy/CoFVzZWTCoGJ5wqB0aGXCoGxheW91dMKgZWRpdG9ywqB0b8KgZGV0ZXJtaW5lwqBpZsKgaXTCoHNob3VsZMKgbGF1bmNoXHJcbiAgICAgICAgLy/CoHRoZcKgZWxlbWVudMKgZWRpdG9ywqBkaWFsb2fCoHdoZW7CoGNyZWF0aW5nwqBuZXfCoFNtYXJ0R3JpZGXCoGVsZW1lbnRzLlxyXG4gICAgICAgIC8vwqBBbHNvwqB1c2VkwqBiecKgb3VywqBcIkxheW91dEVkaXRvci5UZW1wbGF0ZS5TbWFydEdyaWQuY3NodG1sXCLCoHZpZXdcclxuICAgICAgICAvL8KgdGhhdMKgaXPCoHVzZWTCoGFzwqB0aGXCoGxheW91dOKAkHNtYXJ0LWdyaWTCoGRpcmVjdGl2ZSdzwqB0ZW1wbGF0ZS5cclxuICAgICAgICBzZWxmLmhhc0VkaXRvcsKgPcKgaGFzRWRpdG9yO1xyXG5cclxuICAgICAgICAvL8KgVGhlwqBlbGVtZW50wqB0eXBlwqBuYW1lLMKgd2hpY2jCoGlzwqBzZW50wqBiYWNrwqB0b8KgdGhlXHJcbiAgICAgICAgLy/CoGVsZW1lbnTCoGVkaXRvcsKgY29udHJvbGxlcsKgd2hlbsKgYmVpbmfCoGVkaXRlZC5cclxuICAgICAgICBzZWxmLmNvbnRlbnRUeXBlwqA9wqBjb250ZW50VHlwZTtcclxuICAgICAgICBcclxuICAgICAgICAvL8KgVGhlwqBcImxheW91dOKAkGNvbW1vbuKAkGhvbGRlclwiwqBDU1PCoGNsYXNzwqBpc8KgdXNlZMKgYnnCoHRoZcKgbGF5b3V0wqBlZGl0b3JcclxuICAgICAgICAvL8KgdG/CoGlkZW50aWZ5wqBkcm9wwqB0YXJnZXRzLlxyXG4gICAgICAgIHNlbGYuZHJvcFRhcmdldENsYXNzwqA9wqBcImxheW91dOKAkGNvbW1vbuKAkGhvbGRlclwiO1xyXG4gICAgICAgIC8vwqBJbXBsZW1lbnRzwqB0aGXCoHRvT2JqZWN0wqBzZXJpYWxpemF0aW9uwqBmdW5jdGlvbi5cclxuICAgICAgICAvL8KgVGhpc8KgaXPCoGNhbGxlZMKgd2hlbsKgdGhlwqBsYXlvdXTCoGlzwqBiZWluZ8Kgc2VyaWFsaXplZMKgaW50b8KgSlNPTi5cclxuICAgICAgICB2YXLCoHRvT2JqZWN0wqA9wqBzZWxmLnRvT2JqZWN0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vwqBHZXTCoGHCoHJlZmVyZW5jZcKgdG/CoHRoZcKgYmFzZcKgZnVuY3Rpb24uXHJcbiAgICAgICAgc2VsZi50b09iamVjdMKgPcKgZnVuY3Rpb27CoCgpwqB7XHJcbiAgICAgICAgICAgIHZhcsKgcmVzdWx0wqA9wqB0b09iamVjdCgpO1xyXG4gICAgICAgICAgICAvL8KgSW52b2tlwqB0aGXCoGJhc2XCoGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgICAgICByZXN1bHQuY2hpbGRyZW7CoD3CoHNlbGYuY2hpbGRyZW5Ub09iamVjdCgpO1xyXG4gICAgICAgICAgICByZXR1cm7CoHJlc3VsdDtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy/CoFJlZ2lzdGVyc8KgdGhlwqBmYWN0b3J5wqBmdW5jdGlvbsKgd2l0aMKgdGhlwqBlbGVtZW50wqBmYWN0b3J5LlxyXG4gICAgTGF5b3V0RWRpdG9yLnJlZ2lzdGVyRmFjdG9yeShcIlNtYXJ0R3JpZFwiLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgc21hcnRHcmlkID0gbmV3IExheW91dEVkaXRvci5TbWFydEdyaWQoXHJcbiAgICAgICAgICAgIHZhbHVlLmRhdGEsXHJcbiAgICAgICAgICAgIHZhbHVlLmNvbnRlbnRUeXBlLFxyXG4gICAgICAgICAgICB2YWx1ZS5odG1sSWQsXHJcbiAgICAgICAgICAgIHZhbHVlLmh0bWxDbGFzcyxcclxuICAgICAgICAgICAgdmFsdWUuaHRtbFN0eWxlLFxyXG4gICAgICAgICAgICB2YWx1ZS5pc1RlbXBsYXRlZCxcclxuICAgICAgICAgICAgdmFsdWUucnVsZSxcclxuICAgICAgICAgICAgdmFsdWUuaGFzRWRpdG9yLFxyXG4gICAgICAgICAgICBMYXlvdXRFZGl0b3IuY2hpbGRyZW5Gcm9tKHZhbHVlLmNoaWxkcmVuKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy/CoEluaXRpYWxpemVzwqB0aGXCoHRvb2xib3jCoHNwZWNpZmljwqBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIHNtYXJ0R3JpZC50b29sYm94SWNvbiA9IHZhbHVlLnRvb2xib3hJY29uO1xyXG4gICAgICAgIHNtYXJ0R3JpZC50b29sYm94TGFiZWwgPSB2YWx1ZS50b29sYm94TGFiZWw7XHJcbiAgICAgICAgc21hcnRHcmlkLnRvb2xib3hEZXNjcmlwdGlvbiA9IHZhbHVlLnRvb2xib3hEZXNjcmlwdGlvbjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNtYXJ0R3JpZDtcclxuICAgIH0pO1xyXG59KShMYXlvdXRFZGl0b3IgfHwgKExheW91dEVkaXRvciA9IHt9KSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
